:py:mod:`nautobot_ssot_ipfabric.jobs`
=====================================

.. py:module:: nautobot_ssot_ipfabric.jobs

.. autoapi-nested-parse::

   IP Fabric Data Target Job.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   nautobot_ssot_ipfabric.jobs.OptionalObjectVar
   nautobot_ssot_ipfabric.jobs.IpFabricDataSource




Attributes
~~~~~~~~~~

.. autoapisummary::

   nautobot_ssot_ipfabric.jobs.CONFIG
   nautobot_ssot_ipfabric.jobs.IPFABRIC_HOST
   nautobot_ssot_ipfabric.jobs.IPFABRIC_API_TOKEN
   nautobot_ssot_ipfabric.jobs.name
   nautobot_ssot_ipfabric.jobs.jobs


.. py:data:: CONFIG
   

   

.. py:data:: IPFABRIC_HOST
   

   

.. py:data:: IPFABRIC_API_TOKEN
   

   

.. py:data:: name
   :annotation: = SSoT - IPFabric

   

.. py:class:: OptionalObjectVar(model=None, display_field='display', query_params=None, null_option=None, *args, **kwargs)

   Bases: :py:obj:`nautobot.extras.jobs.ScriptVariable`

   Custom implementation of an Optional ObjectVar.

   An object primary key is returned and accessible in job kwargs.

   .. py:attribute:: form_field
      

      


.. py:class:: IpFabricDataSource

   Bases: :py:obj:`nautobot_ssot.jobs.base.DataSource`, :py:obj:`nautobot.extras.jobs.Job`

   Job syncing data from IP Fabric to Nautobot.

   .. py:class:: Meta

      Metadata about this Job.

      .. py:attribute:: name
         :annotation: = IPFabric ‚üπ Nautobot

         

      .. py:attribute:: data_source
         :annotation: = IP Fabric

         

      .. py:attribute:: data_source_icon
         

         

      .. py:attribute:: description
         :annotation: = Sync data from IP Fabric into Nautobot.

         

      .. py:attribute:: field_order
         :annotation: = ['debug', 'safe_delete_mode', 'sync_ipfabric_tagged_only', 'dry_run']

         


   .. py:attribute:: debug
      

      

   .. py:attribute:: safe_delete_mode
      

      

   .. py:attribute:: sync_ipfabric_tagged_only
      

      

   .. py:attribute:: site_filter
      

      

   .. py:method:: data_mappings(cls)
      :classmethod:

      List describing the data mappings involved in this DataSource.


   .. py:method:: config_information(cls)
      :classmethod:

      Dictionary describing the configuration of this DataSource.


   .. py:method:: log_debug(self, message)

      Conditionally log a debug message.


   .. py:method:: sync_data(self)

      Sync a device data from IP Fabric into Nautobot.



.. py:data:: jobs
   

   

